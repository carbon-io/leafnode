.. class:: leafnode.Collection
    :heading:

.. |br| raw:: html

   <br />

===================
leafnode.Collection
===================

This constructor should not be called directly. Use DB.getCollection()

Properties
----------

.. class:: leafnode.Collection
    :noindex:
    :hidden:

    .. attribute:: leafnode.Collection.db

       :type: DB
       :required:

       xxx


Methods
-------

.. class:: leafnode.Collection
    :noindex:
    :hidden:

    .. function:: leafnode.Collection.count(query, cb)

        :param query: xxx
        :type query: Object
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :rtype: number

        count description

    .. function:: leafnode.Collection.createIndex(fieldOrSpec, options, options.w, options.wtimeout, options.j, options.unique, options.sparse, options.background, options.dropDups, options.min, options.max, options.v, options.expireAfterSeconds, options.name, cb)

        :param fieldOrSpec: Defines the index.
        :type fieldOrSpec: string | object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.unique: Creates an unique index.
        :type options.unique: boolean
        :param options.sparse: Creates a sparse index.
        :type options.sparse: boolean
        :param options.background: Creates the index in the background, yielding whenever possible.
        :type options.background: boolean
        :param options.dropDups: A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
        :type options.dropDups: boolean
        :param options.min: For geospatial indexes set the lower bound for the co-ordinates.
        :type options.min: number
        :param options.max: For geospatial indexes set the high bound for the co-ordinates.
        :type options.max: number
        :param options.v: Specify the format version of the indexes.
        :type options.v: number
        :param options.expireAfterSeconds: Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
        :type options.expireAfterSeconds: number
        :param options.name: Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
        :type options.name: number
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: string

        Creates an index on the db and collection collection.

    .. function:: leafnode.Collection.deleteMany(selector, options, options.w, options.wtimeout, options.j, cb)

        :param selector: The Filter used to select the documents to delete
        :type selector: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Delete multiple documents.

    .. function:: leafnode.Collection.deleteObject(_id, options, options.w, options.wtimeout, options.j, cb)

        :param _id: The _id of the doc to delete.
        :type _id: xxx
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error | LeafnodeObjectSetOperationError 

        Delete a single document.

    .. function:: leafnode.Collection.deleteObjects(_ids, options, options.w, options.wtimeout, options.j, cb)

        :param _ids: The _ids of the docs to delete.
        :type _ids: xxx
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error | LeafnodeObjectSetOperationError 

        Delete multiple documents.

    .. function:: leafnode.Collection.deleteOne(selector, options, options.w, options.wtimeout, options.j, cb)

        :param selector: The selector used to select the document to delete
        :type selector: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Delete a single document.

    .. function:: leafnode.Collection.distinct(key, query, options, options.readPreference, cb)

        :param key: Field of the document to find distinct values for.
        :type key: string
        :param query: The query for filtering the set of documents to which we apply the distinct filter.
        :type query: object
        :param options: Optional settings.
        :type options: object
        :param options.readPreference: The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
        :type options.readPreference: ReadPreference | string
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: xxx

        The distinct command returns returns a list of distinct values for the given key across a collection.

    .. function:: leafnode.Collection.drop(options, cb)

        :param options: Optional settings (not currently used)
        :type options: object
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: boolean

        Drop the collection from the database, removing it permanently. New accesses will create a new collection.

    .. function:: leafnode.Collection.dropAllIndexesa(cb)

        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: boolean

        Drops all indexes from this collection.

    .. function:: leafnode.Collection.dropIndex(indexName, options, options.w, options.wtimeout, options.j, cb)

        :param indexName: Name of the index to drop.
        :type indexName: string
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: Object

        Drops an index from this collection.

    .. function:: leafnode.Collection.dropIndexes(cb)

        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: boolean

        Drops all indexes from this collection.

    .. function:: leafnode.Collection.ensureIndex(fieldOrSpec, options, options.w, options.wtimeout, options.j, options.unique, options.sparse, options.background, options.dropDups, options.min, options.max, options.v, options.expireAfterSeconds, options.name, cb)

        :param fieldOrSpec: Defines the index.
        :type fieldOrSpec: string | object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.unique: Creates an unique index.
        :type options.unique: boolean
        :param options.sparse: Creates a sparse index.
        :type options.sparse: boolean
        :param options.background: Creates the index in the background, yielding whenever possible.
        :type options.background: boolean
        :param options.dropDups: A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
        :type options.dropDups: boolean
        :param options.min: For geospatial indexes set the lower bound for the co-ordinates.
        :type options.min: number
        :param options.max: For geospatial indexes set the high bound for the co-ordinates.
        :type options.max: number
        :param options.v: Specify the format version of the indexes.
        :type options.v: number
        :param options.expireAfterSeconds: Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
        :type options.expireAfterSeconds: number
        :param options.name: Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
        :type options.name: number
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: string

        Ensures that an index exists, if it does not it creates it

    .. function:: leafnode.Collection.find(query, cb)

        :param query: The cursor query object.
        :type query: object
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: Cursor

        Creates a cursor for a query that can be used to iterate over results from MongoDB. Note that query options are exposed through the Cursor api.

    .. function:: leafnode.Collection.findAndModify(query, sort, doc, options, options.w, options.wtimeout, options.j, options.remove, options.upsert, options.new, options.fields, cb)

        :param query: Query object to locate the object to modify.
        :type query: object
        :param sort: If multiple docs match, choose the first one in the specified sort order as the object to manipulate.
        :type sort: array
        :param doc: The fields/vals to be updated.
        :type doc: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.remove: Set to true to remove the object before returning.
        :type options.remove: boolean
        :param options.upsert: Perform an upsert operation.
        :type options.upsert: boolean
        :param options.new: Set to true if you want to return the modified object rather than the original. Ignored for remove.
        :type options.new: boolean
        :param options.fields: Object containing the field projection for the result returned from the operation.
        :type options.fields: object
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Find and update a document.

    .. function:: leafnode.Collection.findOne(query, options, options.limit, options.sort, options.fields, options.skip, options.hint, options.explain, options.snapshot, options.timeout, options.tailable, options.batchSize, options.returnKey, options.maxScan, options.min, options.max, options.showDiskLoc, options.comment, options.raw, options.readPreference, options.partial, options.maxTimeMS, cb)

        :param query: Query for find Operation
        :type query: object
        :param options: Optional settings.
        :type options: object
        :param options.limit: Sets the limit of documents returned in the query.
        :type options.limit: number
        :param options.sort: Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
        :type options.sort: array | object
        :param options.fields: The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
        :type options.fields: object
        :param options.skip: Set to skip N documents ahead in your query (useful for pagination).
        :type options.skip: number
        :param options.hint: Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
        :type options.hint: Object
        :param options.explain: Explain the query instead of returning the data.
        :type options.explain: boolean
        :param options.snapshot: Snapshot query.
        :type options.snapshot: boolean
        :param options.timeout: Specify if the cursor can timeout.
        :type options.timeout: boolean
        :param options.tailable: Specify if the cursor is tailable.
        :type options.tailable: boolean
        :param options.batchSize: Set the batchSize for the getMoreCommand when iterating over the query results.
        :type options.batchSize: number
        :param options.returnKey: Only return the index key.
        :type options.returnKey: boolean
        :param options.maxScan: Limit the number of items to scan.
        :type options.maxScan: number
        :param options.min: Set index bounds.
        :type options.min: number
        :param options.max: Set index bounds.
        :type options.max: number
        :param options.showDiskLoc: Show disk location of results.
        :type options.showDiskLoc: boolean
        :param options.comment: You can put a $comment field on a query to make looking in the profiler logs simpler.
        :type options.comment: string
        :param options.raw: Return all BSON documents as Raw Buffer documents.
        :type options.raw: boolean
        :param options.readPreference: The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
        :type options.readPreference: ReadPreference | string
        :param options.partial: Specify if the cursor should return partial results when querying against a sharded system
        :type options.partial: boolean
        :param options.maxTimeMS: Number of miliseconds to wait before aborting the query.
        :type options.maxTimeMS: number
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Fetches the first document that matches the query

    .. function:: leafnode.Collection.findOneAndDelete(query, options, options.projection, options.sort, options.maxTimeMS, cb)

        :param query: Document selection query.
        :type query: object
        :param options: Optional settings.
        :type options: object
        :param options.projection: Limits the fields to return for all matching documents.
        :type options.projection: object
        :param options.sort: Determines which document the operation modifies if the query selects multiple documents.
        :type options.sort: object
        :param options.maxTimeMS: The maximum amount of time to allow the query to run.
        :type options.maxTimeMS: number
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.

    .. function:: leafnode.Collection.findOneAndReplace(query, replacement, options, options.projection, options.sort, options.maxTimeMS, options.upsert, options.returnOriginal, cb)

        :param query: Document selection query.
        :type query: object
        :param replacement: Document replacing the matching document.
        :type replacement: object
        :param options: Optional settings.
        :type options: object
        :param options.projection: Limits the fields to return for all matching documents.
        :type options.projection: object
        :param options.sort: Determines which document the operation modifies if the query selects multiple documents.
        :type options.sort: object
        :param options.maxTimeMS: The maximum amount of time to allow the query to run.
        :type options.maxTimeMS: number
        :param options.upsert: Upsert the document if it does not exist.
        :type options.upsert: boolean
        :param options.returnOriginal: When false, returns the updated document rather than the original. The default is true.
        :type options.returnOriginal: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.

    .. function:: leafnode.Collection.findOneAndUpdatea(query, update, options, options.projection, options.sort, options.maxTimeMS, options.upsert, options.returnOriginal, cb)

        :param query: Document selection query.
        :type query: object
        :param update: Update operations to be performed on the document
        :type update: object
        :param options: Optional settings.
        :type options: object
        :param options.projection: Limits the fields to return for all matching documents.
        :type options.projection: object
        :param options.sort: Determines which document the operation modifies if the query selects multiple documents.
        :type options.sort: object
        :param options.maxTimeMS: The maximum amount of time to allow the query to run.
        :type options.maxTimeMS: number
        :param options.upsert: Upsert the document if it does not exist.
        :type options.upsert: boolean
        :param options.returnOriginal: When false, returns the updated document rather than the original. The default is true.
        :type options.returnOriginal: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.

    .. function:: leafnode.Collection.getIndexes(cb)

        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: array

        Retrieve all the indexes on the collection.

    .. function:: leafnode.Collection.group(keys, condition, initial, reduce, finalize, command, options, options.readPreference, cb)

        :param keys: An object, array or function expressing the keys to group by.
        :type keys: object | array | function | code
        :param condition: An optional condition that must be true for a row to be considered.
        :type condition: object
        :param initial: Initial value of the aggregation counter object.
        :type initial: object
        :param reduce: The reduce function aggregates (reduces) the objects iterated
        :type reduce: function | Code
        :param finalize: An optional function to be run on each item in the result set just before the item is returned.
        :type finalize: function | Code
        :param command: Specify if you wish to run using the internal group command or using eval, default is true.
        :type command: boolean
        :param options: Optional settings.
        :type options: object
        :param options.readPreference: The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
        :type options.readPreference: ReadPreference | string
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: array

        Run a group command across a collection

    .. function:: leafnode.Collection.indexInformationa(options, options.full, cb)

        :param options: Optional settings.
        :type options: object
        :param options.full: Returns the full raw index information.
        :type options.full: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Retrieves this collection's index information.

    .. function:: leafnode.Collection.insert(docs, options, options.w, options.wtimeout, options.j, options.serializeFunctions, options.forceServerObjectId, cb)

        :param docs: Documents to insert.
        :type docs: object | object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.serializeFunctions: Serialize functions on any object.
        :type options.serializeFunctions: boolean
        :param options.forceServerObjectId: Force server to assign _id values instead of driver.
        :type options.forceServerObjectId: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Inserts a single document or an array of documents into MongoDB.

    .. function:: leafnode.Collection.insertMany(docs, options, options.w, options.wtimeout, options.j, options.serializeFunctions, options.forceServerObjectId, cb)

        :param docs: Documents to insert.
        :type docs: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.serializeFunctions: Serialize functions on any object.
        :type options.serializeFunctions: boolean
        :param options.forceServerObjectId: Force server to assign _id values instead of driver.
        :type options.forceServerObjectId: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error xxx
        :rtype: object

        Inserts an array of documents into MongoDB.

    .. function:: leafnode.Collection.insertObject(doc, options, options.w, options.wtimeout, options.j, options.serializeFunctions, options.forceServerObjectId, cb)

        :param doc: Document to insert.
        :type doc: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.serializeFunctions: Serialize functions on any object.
        :type options.serializeFunctions: boolean
        :param options.forceServerObjectId: Force server to assign _id values instead of driver.
        :type options.forceServerObjectId: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Inserts a single document into MongoDB.

    .. function:: leafnode.Collection.insertObjects(docs, options, options.w, options.wtimeout, options.j, options.serializeFunctions, options.forceServerObjectId, cb)

        :param docs: Documents to insert.
        :type docs: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.serializeFunctions: Serialize functions on any object.
        :type options.serializeFunctions: boolean
        :param options.forceServerObjectId: Force server to assign _id values instead of driver.
        :type options.forceServerObjectId: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Inserts an array of documents into MongoDB.

    .. function:: leafnode.Collection.insertOnea(doc, options, options.w, options.wtimeout, options.j, options.serializeFunctions, options.forceServerObjectId, cb)

        :param doc: Document to insert.
        :type doc: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.serializeFunctions: Serialize functions on any object.
        :type options.serializeFunctions: boolean
        :param options.forceServerObjectId: Force server to assign _id values instead of driver.
        :type options.forceServerObjectId: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Inserts a single document into MongoDB.

    .. function:: leafnode.Collection.isCappeda(cb)

        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: boolean

        Returns if the collection is a capped collection

    .. function:: leafnode.Collection.mapReduce(map, reduce, options, options.readPreference, options.out, options.query, options.sort, options.limit, options.keeptemp, options.finalize, options.scope, options.jsMode, options.verbose, cb)

        :param map: The mapping function.
        :type map: function | string
        :param reduce: The reduce function.
        :type reduce: function | string
        :param options: Optional settings.
        :type options: object
        :param options.readPreference: The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
        :type options.readPreference: ReadPreference | string
        :param options.out: Sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*
        :type options.out: object
        :param options.query: Query filter object.
        :type options.query: object
        :param options.sort: Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.
        :type options.sort: object
        :param options.limit: Number of objects to return from collection.
        :type options.limit: number
        :param options.keeptemp: Keep temporary data.
        :type options.keeptemp: boolean
        :param options.finalize: Finalize function.
        :type options.finalize: function | string
        :param options.scope: Can pass in variables that can be access from map/reduce/finalize.
        :type options.scope: object
        :param options.jsMode: It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.
        :type options.jsMode: boolean
        :param options.verbose: Provide statistics on job execution time.
        :type options.verbose: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: Collection

        Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.

    .. function:: leafnode.Collection.reIndex(cb)

        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: boolean

        Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.

    .. function:: leafnode.Collection.remove(selector, options, options.w, options.wtimeout, options.j, options.single, cb)

        :param selector: The selector for the update operation.
        :type selector: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.single: Removes the first document found.
        :type options.single: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Remove one or many documents.

    .. function:: leafnode.Collection.removeMany(selector, options, options.w, options.wtimeout, options.j, cb)

        :param selector: The Filter used to select the documents to remove
        :type selector: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Remove multiple documents.

    .. function:: leafnode.Collection.removeObject(_id, options, options.w, options.wtimeout, options.j, cb)

        :param _id: The _id of the doc to remove.
        :type _id: xxx
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error | LeafnodeObjectSetOperationError 

        Remove a single document.

    .. function:: leafnode.Collection.removeObjects(_ids, options, options.w, options.wtimeout, options.j, cb)

        :param _ids: The _ids of the docs to remove.
        :type _ids: xxx
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error | LeafnodeObjectSetOperationError 

        Remove multiple documents.

    .. function:: leafnode.Collection.removeOne(selector, options, options.w, options.wtimeout, options.j, cb)

        :param selector: The selector used to select the document to remove
        :type selector: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Remove a single document.

    .. function:: leafnode.Collection.rename(newName, options, options.dropTarget, callback)

        :param newName: New name of of the collection.
        :type newName: string
        :param options: Optional settings.
        :type options: object
        :param options.dropTarget: Drop the target name collection if it previously exists.
        :type options.dropTarget: boolean
        :param callback: The results callback
        :type callback: Collection~collectionResultCallback
        :rtype: Promise

        Rename the collection.

    .. function:: leafnode.Collection.save(doc, options, options.w, options.wtimeout, options.j, cb)

        :param doc: Document to save
        :type doc: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic operators and update instead for more efficient operations.

    .. function:: leafnode.Collection.saveObject(doc, options, options.w, options.wtimeout, options.j, cb)

        :param doc: Document to save.
        :type doc: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error If exactly 1 document is not saved.
        :rtype: boolean

        Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic operators and update instead for more efficient operations. XXX: this only seems to report "upsert"s appropriately when you set the _id explicitly...

    .. function:: leafnode.Collection.stats(options, options.scale, cb)

        :param options: Optional settings.
        :type options: object
        :param options.scale: Divide the returned sizes by scale value.
        :type options.scale: number
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Get all the collection statistics.

    .. function:: leafnode.Collection.update(query, doc, options, options.w, options.wtimeout, options.j, options.upsert, options.multi, cb)

        :param query: The selector for the update operation.
        :type query: object
        :param doc: The update document.
        :type doc: object
        :param options: Optional settings.
        :type options: object
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param options.upsert: Update operation is an upsert.
        :type options.upsert: boolean
        :param options.multi: Update one/all documents with operation.
        :type options.multi: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Updates documents.

    .. function:: leafnode.Collection.updateMany(query, update, options, options.upsert, options.w, options.wtimeout, options.j, cb)

        :param query: The query used to select the document to update
        :type query: object
        :param update: The update operations to be applied to the document
        :type update: object
        :param options: Optional settings.
        :type options: object
        :param options.upsert: Update operation is an upsert.
        :type options.upsert: boolean
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Update multiple documents.

    .. function:: leafnode.Collection.updateObject(_id, update, options, options.upsert, options.w, options.wtimeout, options.j, cb)

        :param _id: The _id of the doc to update.
        :type _id: xxx
        :param update: The update operations to be applied to the document.
        :type update: object
        :param options: Optional settings.
        :type options: object
        :param options.upsert: Update operation is an upsert.
        :type options.upsert: boolean
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error | LeafnodeObjectSetOperationError 

        Update a single document.

    .. function:: leafnode.Collection.updateObjects(_ids, update, options, options.upsert, options.w, options.wtimeout, options.j, cb)

        :param _ids: The _ids of the docs to update.
        :type _ids: xxx
        :param update: The update operations to be applied to the document.
        :type update: object
        :param options: Optional settings.
        :type options: object
        :param options.upsert: Update operation is an upsert.
        :type options.upsert: boolean
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error | LeafnodeObjectSetOperationError 

        Update multiple documents.

    .. function:: leafnode.Collection.updateOne(query, update, options, options.upsert, options.w, options.wtimeout, options.j, cb)

        :param query: The query used to select the document to update
        :type query: object
        :param update: The update operations to be applied to the document
        :type update: object
        :param options: Optional settings.
        :type options: object
        :param options.upsert: Update operation is an upsert.
        :type options.upsert: boolean
        :param options.w: The write concern.
        :type options.w: number | string
        :param options.wtimeout: The write concern timeout.
        :type options.wtimeout: number
        :param options.j: Specify a journal write concern.
        :type options.j: boolean
        :param cb: execute asynchronously if present (signature: cb(err, result))
        :type cb: function
        :throws: Error 
        :rtype: object

        Update a single document.
